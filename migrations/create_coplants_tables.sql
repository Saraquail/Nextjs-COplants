import bcrypt from 'bcrypt';
import { db } from '@vercel/postgres';

const client = await db.connect();

async function createPlants() {
  await client.sql`
    CREATE TABLE IF NOT EXISTS plants(
      plantId INT PRIMARY KEY,
      availability TEXT,
      commonName TEXT,
      control TEXT,
      otherNames TEXT,
      cultivar TEXT,
      meaning TEXT,
      ecology TEXT,
      edibility TEXT,
      endemic TEXT,
      familyDetail TEXT,
      familyName TEXT,
      familyId TEXT,
      fiberDye TEXT,
      flowerCluster TEXT,
      flowerColor TEXT,
      flowerDetail TEXT,
      flowerShape TEXT,
      flowerSize TEXT,
      flowerStructure TEXT,
      flowerSymmetry TEXT,
      frequency TEXT,
      fruitColor TEXT,
      fruitType TEXT,
      fruitCone TEXT,
      group TEXT,
      growthForm TEXT,
      habitat TEXT,
      landscapingVisibility BOOLEAN NOT NULL,
      leafArrangement TEXT,
      leafType TEXT,
      leafLeafletShape TEXT,
      legalStatus TEXT,
      lifeCycle TEXT,
      lifeZone TEXT,
      light TEXT,
      livestock TEXT,
      maleFemale TEXT,
      matureHeight TEXT,
      matureSpread TEXT,
      moisture TEXT,
      originArea TEXT,
      origin TEXT,
      otherUses TEXT,
      parkId TEXT,
      petalNumber TEXT,
      scientificName TEXT,
      scientificNamePrefix TEXT,
      scientificNameSuffix TEXT,
      scientificMeaningAckerfield TEXT,
      seasonOfBloom TEXT,
      soil TEXT,
      speciesDetail TEXT,
      subGroup TEXT,
      subspeciesVarForma TEXT,
      toxicity TEXT,
      use TEXT
    );
  `;
}

async function createPlantImages() {
  await client.sql`
    CREATE TABLE IF NOT EXISTS plantImages(
      id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      plantId INT REFERENCES plants(plantId) NOT NULL, 
      imageName TEXT,
      copyRight TEXT,
      source TEXT,
      acknowledgement TEXT,
      imageUrl TEXT
    );
  `;
}

async function createSaved() {
  await client.sql`
    CREATE TABLE IF NOT EXISTS saved(
      id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      userId INT REFERENCES plants(plantId) NOT NULL,
      plantId INT REFERENCES plants(plantId) NOT NULL,
    );
  `;
}

async function createUsers() {
  await client.sql`
    CREATE TABLE IF NOT EXISTS users(
      id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      email TEXT NOT NULL UNIQUE
      password TEXT NOT NULL
    );
  `;
}

  try {
    await client.sql`BEGIN`;
    await createPlants();
    await createPlantImages();
    await createSaved();
    await createUsers();
    await client.sql`COMMIT`;

    return Response.json({ message: 'Database migration successful' });
  } catch (error) {
      await client.sql`ROLLBACK`;
    return Response.json({ error }, { status: 500 });
  }
